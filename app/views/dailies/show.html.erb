<h1>Territories In : "<%= @parentTerritory %>"</h1>

<html>
  <head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});
      // Set a callback to run when the Google Visualization API is loaded.
      google.charts.setOnLoadCallback( drawGraphTerritories );

      // function thenDrawTheMap() {
        // For the map
        gMapsAPIKey = "<%= ENV['DLE_GOOGLE_MAPS_JS_API_KEY'] || YouNeedGoogleMapsAPIkey %>"
        google.charts.load('current', {'packages':['geochart'],
            'mapsApiKey': gMapsAPIKey
          });
        google.charts.setOnLoadCallback( drawRegionsMap );
      // }

      //
      // drawRegionsMap
      //
      function drawRegionsMap() {
        // by lat,long
        // var data = google.visualization.arrayToDataTable([
        //   ['Latitude', 'Longitude', 'Popularity'],
        //   [28.1, -81.1, 200],
        //   [29.1, -82.1, 300],
        //   [30.1, -83.1, 400],
        //   [31.1, -84.1, 500],
        //   [32.1, -85.1, 600],
        //   [33.1, -86.1, 700]
        // ]);
        //  latestForTerritory = @dailies.where( :territory => oneTerritory ).sort_by( &:date )[-1]
        var displayModeToUse  = "markers";
        var regionToUse       = lookupRegion("<%= @parentTerritory %>");
        var resolutionToUse   = "provinces";
        if ( regionToUse == "world" ) {
          resolutionToUse     = "countries";
          displayModeToUse    = "regions";
          <% populationMap = @populationCountries %>
        }
        if ( regionToUse == "US" ) {
          displayModeToUse    = "regions";
          <% populationMap = @populationUSStates %>
        }

        var data  = null;
        <% mapCategory = 'confirmed' %>
        if ( displayModeToUse == "markers" ) {
          // Size-of-circle type - based only on total deaths/confirmed/active cases
          data = google.visualization.arrayToDataTable([
              ['Latitude', 'Longitude', 'Active'],
              <% @uTerritories.each do |oneTerritory| %>
                <% latestDate = "00-00" %>
                <% latestRecord = nil %>
                <% @dailies.where( :territory => oneTerritory ).sort_by( &:date ).each do |daily| %>
                  <% sampleDate = daily.date[ 5..-1 ] %>
                  <% if sampleDate > latestDate %>
                    <% latestDate = sampleDate %>
                    <% latestRecord = daily %>
                  <% end %>
                <% end %>
                <% case mapCategory %>
                <% when 'active' %>
                  <% countToUse = latestRecord.confirmed.to_i - latestRecord.recovered.to_i - latestRecord.deaths.to_i %>
                <% when 'deaths' %>
                  <% countToUse = latestRecord.deaths.to_i %>
                <% when 'confirmed' %>
                  <% countToUse = latestRecord.confirmed.to_i %>
                <% end %>
                [<%= latestRecord.latitude %>, <%= latestRecord.longitude %>, <%= countToUse %>],
              <% end %>
            ]);
        } else {
          // Colored-in-region type - based on total deaths/confirmed/active cases relative to population
          data = google.visualization.arrayToDataTable([
              ['Region', 'Active'],
              <% @uTerritories.each do |oneTerritory| %>
                <% latestDate = "00-00" %>
                <% latestRecord = nil %>
                <% @dailies.where( :territory => oneTerritory ).sort_by( &:date ).each do |daily| %>
                  <% sampleDate = daily.date[ 5..-1 ] %>
                  <% if sampleDate > latestDate %>
                    <% latestDate = sampleDate %>
                    <% latestRecord = daily %>
                  <% end %>
                <% end %>
                <% case mapCategory %>
                <% when 'active' %>
                  <% countToUse = latestRecord.confirmed.to_i - latestRecord.recovered.to_i - latestRecord.deaths.to_i %>
                <% when 'deaths' %>
                  <% countToUse = latestRecord.deaths.to_i %>
                <% when 'confirmed' %>
                  <% countToUse = latestRecord.confirmed.to_i %>
                <% end %>

                <% if populationMap.key?( oneTerritory ) %>
                  <% valueToUse = countToUse / populationMap[oneTerritory]["Population"].to_i %>
                <% else %>
                  <% valueToUse = 0.0 %>
                <% end %>

                <% oneTerritory = oneTerritory.gsub(/[^0-9a-z]/i, '') %>
                // https://github.com/nioya/All-Countries-For-Google-GeoChart/blob/master/geochart-country-name.html
                <% case oneTerritory %>
                <% when "Korea,South" %>
                  <% oneTerritory = "SouthKorea" %>
                <% when "UnitedKingdom" %>
                  <% oneTerritory = "GB" %>
                <% when "US" %>
                 <% oneTerritory = "United States of America" %>
                <% end %>
                <% if oneTerritory.match(/^Coted/) %>
                  <% oneTerritory = "IvoryCoast" %>
                <% end %>

                ["<%= oneTerritory %>", <%= valueToUse %>],
              <% end %>
            ]);
        }
        //  latestRecord.latitude  latestRecord.longitude  oneTerritory  latestRecord.confirmed.to_i - latestRecord.recovered.to_i - latestRecord.deaths.to_i  countToUse

        // var regionToUse     = lookupRegion("<%= @parentTerritory %>");
        // var resolutionToUse = "provinces";
        // //var resolutionToUse = "metros";
        // if ( regionToUse == "world" ) {
        //   resolutionToUse = "countries";
        // }
        console.log( "drawRegionsMap: regionToUse=" + regionToUse + "  resolutionToUse=" + resolutionToUse )
        var options = { colorAxis: {colors: [ 'blue', 'green', 'yellow', 'orange', 'red' ]},
          displayMode: displayModeToUse,
          region: regionToUse,
          resolution: resolutionToUse,
          sizeAxis: { minValue: 0 },
        };

        var chart = new google.visualization.GeoChart(document.getElementById('map_div'));

        // var altData = google.visualization.arrayToDataTable([
        //   ['Latitude', 'Longitude', 'Popularity'],
        //   [ 28.1, -81.1, 300 ],
        // ]);
        // chart.draw(altData, options);
        chart.draw(data, options);
      }

      function lookupRegion(territoryIn) {
        territoryOut = 'world'
        // territoryOut = territoryIn;
        // territoryOut = "US"
        switch(territoryIn) {
          case "Florida":
            territoryOut  = "US-FL";
            break;
          // case "Florida":
          //   territoryOut  = "Florida";
          //   break;
          case "Maine":
            territoryOut  = "US-ME";
            break;
          case "New York":
            territoryOut  = "US-NY";
            break;
          case "Ohio":
            territoryOut  = "US-OH";
            break;



          case "India":
            territoryOut  = "IN";
            break;
          case "US":
            territoryOut  = "US";
            break;


          case "World":
            territoryOut = "world";
            break;
          default:
            console.log("lookupRegion: UNKNOWN territoryIn=" + territoryIn);
        }
        return territoryOut;
      }

      //
      // drawGraphTerritories
      //
      function drawGraphTerritories() {
        <% @uTerritories.each do |oneTerritory| %>
            <% cleanTerritory = oneTerritory.gsub( /[^0-9a-z]/i, '' ) %>
            var data = google.visualization.arrayToDataTable([
                ['Date', 'Active', 'Recovered', 'Deaths'],
                <% @dailies.where( :territory => oneTerritory ).sort_by( &:date ).each do |daily| %>
                  [ "<%= daily.date[ 5..-1 ] %>", <%= daily.confirmed.to_i %> - <%= daily.recovered.to_i %> - <%= daily.deaths.to_i %>, <%= daily.recovered.to_i %>, <%= daily.deaths.to_i %> ],
                <% end %>
              ]);

            // Add chartArea.width at (48%) so that my labels do not get truncated
            var options = {
                title: 'Cases: <%= oneTerritory %>',
                hAxis: { title: 'Date',
                        titleTextStyle: { color: '#333' },
                        slantedText: true,
                        slantedTextAngle: 90 },
                vAxis: {minValue: 0},
                isStacked: true,
                series: [
                    {color: 'yellow'},
                    {color: 'green'},
                    {color: 'red'} ],
                legend: 'none',
                chartArea: { width: "70%",
                      height: "55%" }
              };

            var chart = new google.visualization.AreaChart(document.getElementById('chart_div_<%= cleanTerritory %>'));
            google.visualization.events.addListener( chart, 'click', clickHandler_<%= cleanTerritory %> );
            chart.draw( data, options );

            function clickHandler_<%= cleanTerritory %>( event ) {
              window.location.href = '<%= daily_path( @dailies.find_by( :territory => oneTerritory )) %>';
            }
        <% end %>

        // thenDrawTheMap();
      }
    </script>
  </head>

  <body>
  <div  style="display"  id="map_div"> </div>
    <% @uTerritories.each do |oneTerritory| %>
      <% cleanTerritory = oneTerritory.gsub( /[^0-9a-z]/i, '' ) %>
      <div  style="display: inline-block"  id="chart_div_<%= cleanTerritory %>"  width=50%> </div>
    <% end %>
  </body>
</html>
