<h1>Territories In : "<%= @parentTerritory %>"</h1>

<html>
  <head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});
      // Set a callback to run when the Google Visualization API is loaded.
      google.charts.setOnLoadCallback( drawGraphTerritories );

      // For the map
      gMapsAPIKey = "<%= ENV['DLE_GOOGLE_MAPS_JS_API_KEY'] || YouNeedGoogleMapsAPIkey %>"
      google.charts.load('current', {'packages':['geochart'],
          'mapsApiKey': gMapsAPIKey
        });
      google.charts.setOnLoadCallback( drawRegionsMap );

      //
      // drawRegionsMap
      //
      function drawRegionsMap() {
        // by lat,long
        var displayModeToUse  = "markers";
        var regionToUse       = lookupRegion("<%= @parentTerritory %>");
        var resolutionToUse   = "provinces";
        if ( regionToUse == "world" ) {
          resolutionToUse = "countries";
        }

        <% date_start_string = (Date.today - 60).to_s %>

        var data  = null;

        // puts "rate.index: oneTerritory=" + oneTerritory + "  sampleDate=" + sampleDate + "  latestEndDate=" + latestEndDate
        // puts "rate.index: oneTerritory=" + oneTerritory + "  sampleDate=" + sampleDate + "  latestStartDate=" + latestStartDate
        <% byTerritory = {} %>
        <% @uTerritories.each do |oneTerritory| %>
          <% latestStartDate = "0000-00-00" %>
          <% latestEndDate = "0000-00-00" %>
          <% startRecord = nil %>
          <% latestRecord = nil %>
          <% recordsToUse = [] %>
          <% @dailies.where( :territory => oneTerritory ).sort_by( &:date ).each do |daily| %>
            <% sampleDate = daily.date %>
            <% if sampleDate > latestEndDate %>
              <% latestEndDate = sampleDate %>
              <% latestRecord = daily %>
            <% end %>
            <% if sampleDate > latestStartDate %>
              <% if sampleDate <= date_start_string %>
                <% latestStartDate = sampleDate %>
                <% startRecord = daily %>
              <% end %>
            <% end %>
            <% if sampleDate > date_start_string %>
              <% recordsToUse.append(daily) %>
            <% end %>
          <% end %>
          <% puts "rate.index: oneTerritory=" + oneTerritory + "  latestStartDate=" + latestStartDate + "  countRecords=" + recordsToUse.length().to_s %>

          <% byTerritory[oneTerritory] = {'startRecord' => startRecord, 'latestRecord' => latestRecord, 'recordsToUse' => recordsToUse} %>
        <% end %>


        data = google.visualization.arrayToDataTable([
            ['Latitude', 'Longitude', 'Active'],
            <% byTerritory.each do |oneKey, oneValue| %>
              <% if oneValue['startRecord'].nil? || oneValue['latestRecord'].nil? %>
                <% puts "rate.index.LLA  SKIP oneKey=" + oneKey + "  countRecords=" + oneValue['recordsToUse'].length().to_s %>
                <% next %>
              <% end %>

              <% valueToUse = oneValue['latestRecord'].confirmed.to_f / oneValue['startRecord'].confirmed.to_f %>
              <% if valueToUse.to_f.nan? %>
                <% valueToUse = 1.0 %>
              <% end %>
              <% valueToUse = [valueToUse, 6.0].min %>
              <% puts "rate.index.LLA  oneKey=" + oneKey + "  valueToUse=" + valueToUse.to_s + "  lat,long=" + oneValue['latestRecord'].latitude.to_s + "," + oneValue['latestRecord'].longitude.to_s %>

              [<%= oneValue['latestRecord'].latitude %>, <%= oneValue['latestRecord'].longitude %>, <%= valueToUse %>],
            <% end %>
          ]);

        console.log( "drawRegionsMap: regionToUse=" + regionToUse + "  resolutionToUse=" + resolutionToUse )
        var options = { colorAxis: {colors: [ 'blue', 'green', 'yellow', 'orange', 'red' ]},
          displayMode: displayModeToUse,
          region: regionToUse,
          resolution: resolutionToUse,
          sizeAxis: { minValue: 1 },
        };

        var chart = new google.visualization.GeoChart(document.getElementById('map_div'));

        chart.draw(data, options);
      }

      function lookupRegion(territoryIn) {
        territoryOut = 'world'
        // territoryOut = territoryIn;
        // territoryOut = "US"
        switch(territoryIn) {
          case "Florida":
            territoryOut  = "US-FL";
            break;
          // case "Florida":
          //   territoryOut  = "Florida";
          //   break;
          case "Maine":
            territoryOut  = "US-ME";
            break;
          case "New York":
            territoryOut  = "US-NY";
            break;
          case "Ohio":
            territoryOut  = "US-OH";
            break;

          case "India":
            territoryOut  = "IN";
            break;
          case "US":
            territoryOut  = "US";
            break;

          case "World":
            territoryOut = "world";
            break;
          default:
            console.log("lookupRegion: UNKNOWN territoryIn=" + territoryIn);
        }
        return territoryOut;
      }

      //
      // drawGraphTerritories
      //
      function drawGraphTerritories() {
        <% date_start_string = (Date.today - (6*30)).to_s %>
        <% @uTerritories.each do |oneTerritory| %>
            <% cleanTerritory = oneTerritory.gsub( /[^0-9a-z]/i, '' ) %>
            <% hasData = false %>
            var data = google.visualization.arrayToDataTable([
                ['Date', 'Active', 'Recovered', 'Deaths'],
                <% @dailies.where( :territory => oneTerritory ).sort_by( &:date ).each do |daily| %>
                  <% if daily.date < date_start_string %>
                  <%   next %>
                  <% end %>
                  <% hasData = true %>
                  <% active = [daily.confirmed.to_i - daily.recovered.to_i - daily.deaths.to_i, 1].max %>
                  <% recovered = [daily.recovered.to_i, 1].max %>
                  <% deaths = [daily.deaths.to_i, 1].max %>
                  [ "<%= daily.date[ 5..-1 ] %>", <%= active %>, <%= recovered %>, <%= deaths %> ],
                <% end %>
              ]);

            <% unless hasData %>
            <%  next %>
            <% end %>

            // Add chartArea.width so that my labels do not get truncated
            var options = {
                title: 'Cases: <%= oneTerritory %>',
                hAxis: { title: 'Date',
                        titleTextStyle: { color: '#333' },
                        slantedText: true,
                        slantedTextAngle: 90 },
                vAxis: {minValue: 0},
                isStacked: true,
                series: [
                    {color: 'yellow'},
                    {color: 'green'},
                    {color: 'red'} ],
                legend: 'none',
                chartArea: { width: "70%",
                      height: "55%" }
              };

            var chart = new google.visualization.AreaChart(document.getElementById('chart_div_<%= cleanTerritory %>'));
            google.visualization.events.addListener( chart, 'click', clickHandler_<%= cleanTerritory %> );
            chart.draw( data, options );

            function clickHandler_<%= cleanTerritory %>( event ) {
              window.location.href = '<%= rate_path( @dailies.find_by( :territory => oneTerritory )) %>';
            }
        <% end %>

        // thenDrawTheMap();
      }
    </script>
  </head>

  <body>
  <div  style="display"  id="map_div"> </div>
    <% @uTerritories.each do |oneTerritory| %>
      <% cleanTerritory = oneTerritory.gsub( /[^0-9a-z]/i, '' ) %>
      <div  style="display: inline-block"  id="chart_div_<%= cleanTerritory %>"  width=50%> </div>
    <% end %>
  </body>
</html>
